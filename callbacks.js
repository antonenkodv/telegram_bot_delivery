const {bot} = require("./bot");
const options = require("./options");
const functions = require("./functions")
const initDB = require("./init_db");

const db = initDB.handleDisconnect();

module.exports = {
    async callOrder(msg, chatId) {
        const orders = await functions.getSql('orders_regions, orders', 'orders.status=1 and orders_regions.status=1 AND orders.id=orders_regions.order_id', 'orders.title, orders.id');
        const inline_keyboard = [];
        for (let i = 0; i < orders.length; i++) {
            inline_keyboard.push([{text: orders[i].title, callback_data: "order_" + orders[i].id}]);
        }
        inline_keyboard.push([{text: 'üîô –ú–µ–Ω—é', callback_data: "adminMenu_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        const text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>";
        bot.editMessageText(text, result);
    },
    async completeOrder(msg, chatId) {
        let order = parseInt(msg.data.split('_')[1]);
        const user_id = parseInt(msg.data.split('_')[2]);
        const inline_keyboard = [];
        inline_keyboard.push([{text: 'üîô –ú–µ–Ω—é', callback_data: "adminMenu_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        bot.editMessageText(functions.getEntities(msg.message.text, msg.message.entities) + "\n\n–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ", result);

        const user = await functions.getSql('users', 'id=' + user_id);
        order = await functions.getSql('orders', 'id=' + order);
        const messages = await functions.getSql('messages', 'order_id=' + order[0].id + ' and user_id=' + user_id);
        if (messages.length > 0) {
            bot.deconsteMessage(user[0].chat_id, messages[0].message_id);
            db.query("DELETE FROM `messages` WHERE id=" + messages[0].id);
        }
        db.query("UPDATE `orders` SET status=3 WHERE id=" + order[0].id);
        db.query("DELETE FROM `execution_order` WHERE order_id=" + order[0].id);
        db.query("INSERT INTO `orders_end`(`id_user`, `order_id`) VALUES (" + user[0].id + "," + order[0].id + ")");

        bot.sendMessage(user[0].chat_id, "<b>" + order[0].title + "</b>\n\n" + order[0].description + "\n\n–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ", options.mainMenu)
    },
    async executionOrder(msg, chatId) {
        let vehicleInfo;
        let order = parseInt(msg.data.split('_')[1]);
        const user_id = parseInt(msg.data.split('_')[2]);
        const inline_keyboard = [];
        inline_keyboard.push([{text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data: "completeOrder_" + order + "_" + user_id}]);
        inline_keyboard.push([{text: 'üîô –ú–µ–Ω—é', callback_data: "adminMenu_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        const user = await functions.getSql("users", "id=" + user_id);
        const vehicle = await functions.getSql("vehicles", "digits='" + user[0].digits + "'");
        order = await functions.getSql("orders", "id=" + order);
        if (vehicle.length > 0) {
            vehicleInfo = "\n\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ:</i> \n–ú–æ–¥–µ–ª—å: <b>" + vehicle[0].vendor + " " + vehicle[0].model + " " + vehicle[0].model_year + "</b>\n–¢–∏–ø: <b>" + vehicle[0].kind + "</b>\n–¶–≤–µ—Ç: <b>" + vehicle[0].color + "</b>";
        } else {
            vehicleInfo = "\n\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</i>";
        }
        bot.editMessageText("<i>–ó–∞–¥–∞–Ω–∏–µ:</i>\n<b>" + order[0].title + "</b>\n\n" + order[0].description + "\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</i>\n–ò–º—è: <b>" + user[0].name + "</b>\nTelegram: @" + user[0].username + "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>" + user[0].phone + "</b>\n–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: <b>" + user[0].digits + "</b>" + vehicleInfo, result);
    },
    async acceptOrder(msg, chatId) {
        const orders = await functions.getSql('execution_order,orders', 'execution_order.status=1 and orders.status=2 and orders.id = execution_order.order_id', 'orders.title, orders.id, execution_order.user_id');
        const inline_keyboard = [];
        for (let i = 0; i < orders.length; i++) {
            inline_keyboard.push([{
                text: orders[i].title,
                callback_data: "executionOrder_" + orders[i].id + "_" + orders[i].user_id
            }]);
        }
        inline_keyboard.push([{text: 'üîô –ú–µ–Ω—é', callback_data: "adminMenu_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        bot.editMessageText("<b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏</b>\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ", result);
    },
    async adminMenu(msg, chatId) {
        const inline_keyboard = [];
        inline_keyboard.push([{text: "–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", callback_data: "acceptOrder_"}]);
        inline_keyboard.push([{text: "–û–∂–∏–¥–∞—é—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data: "holdOrder_"}]);
        inline_keyboard.push([{text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data: "sendOrder_"}]);
        inline_keyboard.push([{text: "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data: "createOrder_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        bot.editMessageText("<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>", result);
    },
    async sendOrder(msg, chatId) {
        const id = parseInt(msg.data.split('_')[1]);
        const region = parseInt(msg.data.split('_')[2]);
        let text = "<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>";
        const inline_keyboard = [];
        if (!id) {// –∑–Ω–∞—á–∏—Ç –∞–¥–º–∏–Ω –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –∑–∞–¥–∞–Ω–∏–µ
            const orders = await functions.getSql('orders', 'status=0 and title is not null and description is not null');
            for (let i = 0; i < orders.length; i++) {
                inline_keyboard.push([{text: orders[i].title, callback_data: "sendOrder_" + orders[i].id}]);
            }
            text = "<b>–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>";
        } else if (!region) {//–∑–Ω–∞—á–∏—Ç —Ä–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω , –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤
            const regions = await functions.getSql('regions', 'status=1');
            for (let i = 0; i < regions.length; i++) {
                inline_keyboard.push([{
                    text: regions[i].title,
                    callback_data: "sendOrder_" + id + "_" + regions[i].id
                }]);
            }
            text = "<b>–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–π–æ–Ω –ø–æ –∫–∞—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞</b>";
        } else {//–∑–Ω–∞—á–∏—Ç —Ä–µ–≥–∏–æ–Ω –≤—ã–±—Ä–∞–Ω , –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
            const checkActiv = await functions.getSql('orders_regions', 'region_id=' + region + ' and order_id=' + id);
            if (checkActiv.length <= 0) {
                db.query("INSERT INTO `orders_regions`(`region_id`, `order_id`) VALUES (" + region + "," + id + ")");//–Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º orders_regions
                db.query("UPDATE `orders` SET `status`=1 WHERE id=" + id);//–ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∫–∞ –∑–∞–¥–∞–Ω–∏–µ –∫—Ç–æ-—Ç–æ –≤–æ–∑—å–º–µ—Ç

                const regions = await functions.getSql('finedOrder', 'status=1 and region_id=' + region);
                text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ: <b>" + regions.length + "</b>\n–ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µ ...";
                const result = {
                    chat_id: chatId,
                    message_id: msg.message.message_id,

                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                };
                bot.editMessageText(text, result);
                const sends = await this.sendOrders(id, region);
                console.log(sends)
                text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ: <b>" + regions.length + "</b>\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>" + sends + "</b>";
            } else {
                text = "<b>–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞</b>";
            }
        }
        inline_keyboard.push([{text: 'üîô –ú–µ–Ω—é', callback_data: "adminMenu_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        bot.editMessageText(text, result);
    },
    async sendOrders(order, region, i = 0) {// –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        order = await functions.getSql('orders', 'id=' + order);
        order = order[0];
        const fineders = await functions.getSql('finedOrder', 'status=1 and region_id=' + region);

        return new Promise(resolve => {

            if (fineders.length > i) {
                console.log("send");
                const inline_keyboard = [];
                inline_keyboard.push([{text: "–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data: "getOrder_" + order.id}]);
                const result = {

                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                };
                bot.sendMessage(fineders[i].chat_id, "<b>" + order.title + "</b>\n" + order.description, result).then(async function (callback) {
                    db.query("INSERT INTO `messages`(`user_id`, `message_id`, `chat_id`, `order_id`) VALUES (" + fineders[i].user_id + "," + callback.message_id + "," + fineders[i].chat_id + "," + order.id + ")");
                    setTimeout(async function () {
                        const send_i = await this.sendOrders(order.id, region, i + 1);
                        resolve(send_i);
                    }, 300);
                }, function (err) {
                    console.log(err);
                });
            } else {
                console.log("End");
                resolve(i);
            }
        });
    },
    async deleteOrder(msg, chatId) {
        const id = parseInt(msg.data.split('_')[1]);
        db.query("DELETE FROM `orders` WHERE id=" + id);
        this.editMessages(id);
        const inline_keyboard = [];
        inline_keyboard.push([{text: "–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", callback_data: "acceptOrder_"}]);
        inline_keyboard.push([{text: "–û–∂–∏–¥–∞—é—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data: "holdOrder_"}]);
        inline_keyboard.push([{text: "–û—Ç–ø—Ä–∞–≤–∏—å –∑–∞–¥–∞–Ω–∏–µ", callback_data: "sendOrder_"}]);
        inline_keyboard.push([{text: "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data: "createOrder_"}]);
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        bot.editMessageText("<b>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>", result);
    },
    async createOrder(msg, chatId) {
        const id = parseInt(msg.data.split('_')[1]);
        const user = await functions.getUser(msg, 1);
        let text = "";
        if (id) {
            const order = await functions.getSql('orders', 'id=' + id);
            if (!order[0].description) {
                db.query("UPDATE `orders` SET `title`=null WHERE id=" + order[0].id);
                text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)";
                const inline_keyboard = [];
                const result = {
                    chat_id: chatId,
                    message_id: msg.message.message_id,

                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                };
                bot.editMessageText(text, result);
            } else {
                db.query("UPDATE `orders` SET `description`=null WHERE id=" + order[0].id);
                const inline_keyboard = [];
                inline_keyboard.push([{text: order[0].title, callback_data: "_"}]);
                inline_keyboard.push([{
                    text: "üîÑ –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data: "createOrder_" + order[0].id
                }, {text: "–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data: "deleteOrder_" + order[0].id}]);
                const result = {
                    chat_id: chatId,
                    message_id: msg.message.message_id,

                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                };
                bot.editMessageText("–ù–∞–∑–≤–∞–Ω–∏–µ: \n<b>" + order[0].title + "</b> \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∂–µ‚¨áÔ∏è \n–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å  –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ. \n\n<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 700 —Å–∏–º–≤–æ–ª–æ–≤</b>", result);
            }

        } else if (user.admin) {
            const order = await functions.getSql('orders', '(title is null or description is null) and user_id=' + user.id);
            if (order.length <= 0 || !order[0].title) {
                if (order.length > 0 && !order[0].title)
                    text = "<b>–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–¥–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)";
                else {
                    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)";
                    db.query("INSERT INTO `orders`(`user_id`) VALUES (" + user.id + ")");
                }
                const inline_keyboard = [];
                const result = {
                    chat_id: chatId,
                    message_id: msg.message.message_id,

                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                };
                bot.editMessageText(text, result).then(async function (callback) {
                    const newOrder = await functions.getSql('orders', 'title is null and user_id=' + user.id)
                    db.query("UPDATE `orders` SET `message_id`='" + callback.message_id + "' WHERE id=" + newOrder[0].id);
                });
            } else if (!order[0].description) {
                text = "<b>–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–¥–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–¥–æ 700 —Å–∏–º–≤–æ–ª–æ–≤)";
                const inline_keyboard = [];
                const result = {
                    chat_id: chatId,
                    message_id: msg.message.message_id,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                };
                bot.editMessageText(text, result);
            }
        }
    },
    async getOrder(msg, chatId) {
        const id = parseInt(msg.data.split('_')[1]);
        const user = await functions.getSql("users", "chat_id=" + chatId);
        const vehicle = await functions.getSql("vehicles", "digits='" + user[0].digits + "'");
        let vehicleInfo = "";
        db.query("DELETE FROM `orders_regions` WHERE order_id=" + id);
        db.query("UPDATE `orders` SET status=2 WHERE id=" + id);
        db.query("DELETE FROM `messages` WHERE chat_id=" + chatId + " and order_id=" + id);
        db.query("INSERT INTO `execution_order`(`order_id`, `user_id`, `message_id`, `chat_id`) VALUES ('" + id + "','" + user[0].id + "','" + msg.message.message_id + "','" + chatId + "')");
        this.editMessages(id);
        const messages = await functions.getSql('finedOrder', 'chat_id=' + chatId);
        if (messages.length > 0) {
            bot.deleteMessage(chatId, messages[0].message_id);
            db.query("DELETE FROM `finedOrder` WHERE chat_id=" + chatId);
        }
        bot.deleteMessage(chatId, msg.message.message_id);
        if (vehicle.length > 0) {
            vehicleInfo = "\n\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ:</i> \n–ú–æ–¥–µ–ª—å: <b>" + vehicle[0].vendor + " " + vehicle[0].model + " " + vehicle[0].model_year + "</b>\n–¢–∏–ø: <b>" + vehicle[0].kind + "</b>\n–¶–≤–µ—Ç: <b>" + vehicle[0].color + "</b>";
        } else {
            vehicleInfo = "\n\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</i>";
        }
        bot.sendMessage(chatId, functions.getEntities(msg.message.text, msg.message.entities) + "\n\n‚úÖ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ</b>", options.taskView);
        const admins = await functions.getSql('admins,users', 'admins.user_id = users.id', 'users.chat_id');
        var result = {

            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                one_time_keyboard: true,
                keyboard: [
                    [{
                        text: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏—è"
                    }]
                ]
            })
        };
        for (let i = 0; i < admins.length; i++) {
            await functions.forSend(admins[i].chat_id, "<i>–ó–∞–¥–∞–Ω–∏–µ:</i>\n" + functions.getEntities(msg.message.text, msg.message.entities) + "\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</i>\n–ò–º—è: " + user[0].name + "\nTelegram: @" + user[0].username + "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + user[0].phone + "\n–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: " + user[0].digits + vehicleInfo, result)
        }
    },
    async order(msg,chatId){
        const id = parseInt(msg.data.split('_')[1]);
        const order = await functions.getSql("orders", "id=" + id);
        const user = await functions.getUser(msg, 1);
        const messages = await functions.getSql('messages', 'order_id=' + id + ' and chat_id=' + chatId);
        if (messages.length > 0) {
            bot.deleteMessage(chatId, messages[0].message_id);
            db.query("DELETE FROM `messages` WHERE chat_id=" + chatId);
        }

        if (order.length <= 0) {
            bot.sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ", result);
            if (order.length > 0)
                this.editMessages(order[0].id);
            return;
        }
        const inline_keyboard = [];
        if (user.admin)
            inline_keyboard.push([{text: "–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data: "deleteOrder_" + order[0].id}]);
        inline_keyboard.push([{text: "–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data: "getOrder_" + id}]);
        const result = {
            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        bot.sendMessage(chatId, "<b>" + order[0].title + "</b>\n\n" + order[0].description, result).then(function (callback) {
            db.query("INSERT INTO `messages`(`message_id`, `chat_id`, `order_id`) VALUES ('" + callback.message_id + "','" + chatId + "','" + id + "')");
        });
    },
    async stop(msg,chatId){
        const inline_keyboard = [];
        const result = {
            chat_id: chatId,
            message_id: msg.message.message_id,

            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard})
        };
        db.query("DELETE FROM `finedOrder` WHERE chat_id=" + chatId);
        bot.editMessageText("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", result).then(function () {
            bot.sendMessage(chatId, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", options.mainMenu);
        });
    },
    async finedOrder(msg,chatId){
        const fromChatId = msg.from.id
        const choosedRegion = parseInt(msg.data.split('_')[1]);//—Ä–µ–≥–∏–æ–Ω –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        let flags = await functions.getSql("finedOrder", "chat_id = " + fromChatId);
        flags = JSON.parse(flags[0].region_id)

        if (!flags.find(item => item == choosedRegion)) flags.push(choosedRegion)
        else return

        const addRegion = `UPDATE finedOrder
                         SET region_id = '[${flags}]'
                         WHERE chat_id = '${fromChatId}' `;
        await db.query(addRegion)
        await functions.findOrder(chatId, flags, msg.message.message_id)
    },
    async changeAuto(msg,chatId){
        try {
            bot.deleteMessage(chatId, msg.message.message_id)
            bot.deleteMessage(chatId, msg.message.message_id - 1)
            const  user = await functions.getUser(msg, 1)
            const {digits} = user
            let sql = `DELETE FROM vehicles
                   WHERE digits = '${digits}'`
            await db.query(sql)
            sql = `UPDATE users
               SET digits = null , photo = null
               WHERE chat_id = '${chatId}'`
            await db.query(sql)
            user.digits = null
            await functions.verifyUser(user)
        } catch (err) {
            console.log(err)
            bot.sendMessage(chatId, "–û—à–∏–±–∫–∞!–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
        }
    },
    async backToMenu(msg,chatId){
        bot.deleteMessage(chatId, msg.message.message_id)
        bot.deleteMessage(chatId, msg.message.message_id - 1)
        bot.sendMessage(chatId, "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", options.mainMenu);
    },
    async enterData(msg){
        const chatId = msg
        const sql = `UPDATE users
                     SET auto_fill = false
                     WHERE chat_id= '${chatId}'`;
        await db.query(sql)
        const user = await functions.getUser(msg, 1)
        await functions.verifyUser(user)
    },
    async  editMessages(order) {
        var messages = await functions.getSql('messages', 'order_id=' + order);
        if (messages.length > 0) {
            var result = {
                chat_id: messages[0].chat_id,
                message_id: messages[0].message_id,

                parse_mode: "HTML"
            };
            bot.editMessageText("–ó–∞–¥–∞–Ω–∏–µ –∑–∞–±—Ä–∞–ª–∏ –≤ —Ä–∞–±–æ—Ç—É", result);
            db.query("DELETE FROM `messages` WHERE id=" + messages[0].id);
            setTimeout(function () {
               this.editMessages(order);
            }, 300);
        }
    }
}

